{
	"name": "Combined_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSP_costmgmt_exports_new",
						"type": "DatasetReference"
					},
					"name": "CSP"
				},
				{
					"dataset": {
						"referenceName": "PAYG_costmgmt_exports",
						"type": "DatasetReference"
					},
					"name": "PAYG"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1_combined",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "DerivedColumns",
					"description": "Creating columns 'StorageService' (all derived from \"additionalInfo\" column)"
				},
				{
					"name": "CombineCSPwithPAYG"
				},
				{
					"name": "SelectColumnsFromPAYG"
				},
				{
					"name": "SelectColumnsFromCSP"
				}
			],
			"scriptLines": [
				"source(output(",
				"          billingAccountName as string,",
				"          partnerName as string,",
				"          resellerName as string,",
				"          resellerMpnId as string,",
				"          customerTenantId as string,",
				"          customerName as string,",
				"          costCenter as string,",
				"          billingPeriodEndDate as date 'MM/dd/yy',",
				"          billingPeriodStartDate as date 'MM/dd/yy',",
				"          servicePeriodEndDate as date 'MM/dd/yy',",
				"          servicePeriodStartDate as date 'MM/dd/yy',",
				"          date as date 'MM/dd/yy',",
				"          serviceFamily as string,",
				"          productOrderId as string,",
				"          productOrderName as string,",
				"          consumedService as string,",
				"          meterId as string,",
				"          meterName as string,",
				"          meterCategory as string,",
				"          meterSubCategory as string,",
				"          meterRegion as string,",
				"          ProductId as string,",
				"          ProductName as string,",
				"          SubscriptionId as string,",
				"          subscriptionName as string,",
				"          publisherType as string,",
				"          publisherId as string,",
				"          publisherName as string,",
				"          resourceGroupName as string,",
				"          ResourceId as string,",
				"          resourceLocation as string,",
				"          location as string,",
				"          effectivePrice as decimal(38,18),",
				"          quantity as decimal(38,18),",
				"          unitOfMeasure as string,",
				"          chargeType as string,",
				"          billingCurrency as string,",
				"          pricingCurrency as string,",
				"          costInBillingCurrency as decimal(38,18),",
				"          costInUsd as decimal(38,18),",
				"          exchangeRatePricingToBilling as boolean,",
				"          exchangeRateDate as date 'MM/dd/yy',",
				"          serviceInfo1 as string,",
				"          serviceInfo2 as string,",
				"          additionalInfo as string,",
				"          tags as string,",
				"          PayGPrice as decimal(38,18),",
				"          frequency as string,",
				"          term as string,",
				"          reservationId as string,",
				"          reservationName as string,",
				"          pricingModel as string,",
				"          unitPrice as decimal(38,18),",
				"          benefitId as string,",
				"          benefitName as string,",
				"          provider as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'CostExportFileName',",
				"     wildcardPaths:['CSP/**/*.csv']) ~> CSP",
				"source(output(",
				"          SubscriptionGuid as string,",
				"          ResourceGroup as string,",
				"          ResourceLocation as string,",
				"          UsageDateTime as date 'yyyy-MM-dd',",
				"          MeterCategory as string,",
				"          MeterSubcategory as string,",
				"          MeterId as string,",
				"          MeterName as string,",
				"          MeterRegion as string,",
				"          UsageQuantity as decimal(38,18),",
				"          ResourceRate as decimal(38,18),",
				"          PreTaxCost as decimal(38,18),",
				"          ConsumedService as string,",
				"          ResourceType as string,",
				"          InstanceId as string,",
				"          Tags as string,",
				"          OfferId as string,",
				"          AdditionalInfo as string,",
				"          ServiceInfo1 as string,",
				"          ServiceInfo2 as string,",
				"          ServiceName as string,",
				"          ServiceTier as string,",
				"          Currency as string,",
				"          UnitOfMeasure as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'CostExportFileName',",
				"     wildcardPaths:['PAYG/**/*.csv']) ~> PAYG",
				"CombineCSPwithPAYG derive(StorageService = iif(regexMatch(additionalInfo, `\"StorageService\":`), regexExtract(additionalInfo, `\"StorageService\": \"(.*?)\"`), \"N/A\"),",
				"          ResourceType = regexExtract(lower(ResourceId), `providers/(.*)/`)) ~> DerivedColumns",
				"SelectColumnsFromCSP, SelectColumnsFromPAYG union(byName: true)~> CombineCSPwithPAYG",
				"PAYG select(mapColumn(",
				"          SubscriptionId = SubscriptionGuid,",
				"          resourceGroupName = ResourceGroup,",
				"          location = ResourceLocation,",
				"          date = UsageDateTime,",
				"          meterCategory = MeterCategory,",
				"          meterSubCategory = MeterSubcategory,",
				"          meterId = MeterId,",
				"          meterName = MeterName,",
				"          meterRegion = MeterRegion,",
				"          quantity = UsageQuantity,",
				"          PayGPrice = ResourceRate,",
				"          unitPrice = ResourceRate,",
				"          costInBillingCurrency = PreTaxCost,",
				"          costInUsd = PreTaxCost,",
				"          consumedService = ConsumedService,",
				"          ResourceType,",
				"          ResourceId = InstanceId,",
				"          tags = Tags,",
				"          additionalInfo = AdditionalInfo,",
				"          billingCurrency = Currency,",
				"          unitOfMeasure = UnitOfMeasure,",
				"          CostExportFileName,",
				"          serviceInfo1 = ServiceInfo1,",
				"          serviceInfo2 = ServiceInfo2",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectColumnsFromPAYG",
				"CSP select(mapColumn(",
				"          date,",
				"          consumedService,",
				"          meterId,",
				"          meterName,",
				"          meterCategory,",
				"          meterSubCategory,",
				"          meterRegion,",
				"          SubscriptionId,",
				"          resourceGroupName,",
				"          ResourceId,",
				"          location,",
				"          quantity,",
				"          unitOfMeasure,",
				"          billingCurrency,",
				"          costInBillingCurrency,",
				"          costInUsd,",
				"          serviceInfo1,",
				"          serviceInfo2,",
				"          additionalInfo,",
				"          tags,",
				"          PayGPrice,",
				"          unitPrice,",
				"          CostExportFileName",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectColumnsFromCSP",
				"DerivedColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     outputRejectedData: true) ~> sink1"
			]
		}
	}
}